import * as userMessages from "../lang/messages/en/user.js";

const pixelUnit = "px";
const buttonWidth = "10em";
const buttonHeight = "5em";
const container = document.getElementById("container");
const interval = 2000;
const emptyPage = "";

// Disclosure: Function "getRandomColor" is generated by ChatGPT
function getRandomColor() {
  return `#${Math.floor(Math.random() * 16777215)
    .toString(16)
    .padStart(6, "0")}`;
}

class Button {
  constructor(color, width, height, top, left, number) {
    this.elem = document.createElement("button");
    this.color = color;
    this.width = width;
    this.height = height;
    this.number = number;
    this.render();
    this.setLocation(top, left);
  }
  render() {
    this.elem.style.backgroundColor = this.color;
    this.elem.style.width = this.width;
    this.elem.style.height = this.height;
    this.elem.style.position = "absolute";
    this.elem.innerText = this.number;
    container.appendChild(this.elem);
  }
  setLocation(top, left) {
    this.elem.style.top = top;
    this.elem.style.left = left;
  }
}

class ButtonManager {
  constructor() {
    this.buttons = [];
  }
  createButtons(number) {
    const containerWidth = window.innerWidth;
    let rowWidth = 0,
      rowTop = 0;
    for (let i = 0; i < number; i++) {
      const button = new Button(
        getRandomColor(),
        buttonWidth,
        buttonHeight,
        rowTop + pixelUnit,
        rowWidth + pixelUnit,
        i + 1
      );
      this.buttons.push(button);
      rowWidth += button.elem.offsetWidth;
      if (rowWidth + button.elem.offsetWidth > containerWidth) {
        rowWidth = 0;
        rowTop += button.elem.offsetHeight;
      }
    }
  }

  randomizeButtons() {
    this.buttons.forEach((button) => {
      button.elem.disabled = true;
    });

    setTimeout(() => {
      this.buttons.forEach((button) => {
        button.elem.innerText = emptyPage;
      });
      this.randomizePositions(() => {
        this.buttons.forEach((button) => (button.elem.disabled = false));
      });
    }, this.buttons.length * 1000);
  }

  // Disclosure: Function "randomizePositions" is written with help from Copilot
  randomizePositions(callback) {
    let count = 0;
    const randomize = () => {
      if (count < this.buttons.length) {
        this.buttons.forEach((button) => {
          const maxTop = window.innerHeight - button.elem.offsetHeight;
          const maxLeft = window.innerWidth - button.elem.offsetWidth;
          button.setLocation(
            Math.floor(Math.random() * maxTop) + pixelUnit,
            Math.floor(Math.random() * maxLeft) + pixelUnit
          );
        });
        count++;
        if (count < this.buttons.length) {
          setTimeout(randomize, interval);
        } else callback();
      }
    };
    randomize();
  }
}

class Game {
  constructor(numOfButtons) {
    this.manager = new ButtonManager();
    this.manager.createButtons(numOfButtons);
    this.manager.randomizeButtons();
    this.userAttempt = 1;
  }

  reactToClick() {
    this.manager.buttons.forEach((button) => {
      button.elem.addEventListener("click", () => {
        if (button.number === this.userAttempt) {
          this.userAttempt++;
          button.elem.innerText = button.number;
          if (this.userAttempt > this.manager.buttons.length) {
            alert(userMessages.success);
            this.restartGame();
          }
        } else {
          this.manager.buttons.forEach((button) => {
            button.elem.innerText = button.number;
          });
          alert(userMessages.failure);
          this.restartGame();
        }
      });
    });
  }

  restartGame() {
    container.innerHTML = emptyPage;
    const startScreen = new StartScreen(container);
    startScreen.render();
  }
}

class StartScreen {
  constructor(container) {
    this.container = container;
  }

  render() {
    const labelDiv = document.createElement("div");
    this.container.appendChild(labelDiv);
    const label = document.createElement("label");
    label.innerText = userMessages.prompt;
    labelDiv.appendChild(label);

    const input = document.createElement("input");
    input.type = "number";
    this.container.appendChild(input);

    const button = document.createElement("button");
    button.innerText = userMessages.button;
    this.container.appendChild(button);

    button.addEventListener("click", () => {
      if (input.value < 3 || input.value > 7) {
        alert(userMessages.invalidInput);
        return;
      }
      this.container.innerHTML = emptyPage;
      const game = new Game(input.value);
      game.reactToClick();
    });
  }
}

const startScreen = new StartScreen(container);
startScreen.render();
