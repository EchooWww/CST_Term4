package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"bug-free/demo/graph/generated"
	"bug-free/demo/graph/model"
	"context"
	"fmt"
	"strconv"
)

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	id := generateID()
	user := &model.User{
		ID:    id,
		Name:  name,
		Email: email,
	}
	
	r.users = append(r.users, user)
	return user, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID string) (*model.Post, error) {
	// Verify the author exists
	var author *model.User
	for _, u := range r.users {
		if u.ID == authorID {
			author = u
			break
		}
	}
	
	if author == nil {
		return nil, fmt.Errorf("author with ID %s not found", authorID)
	}
	
	id := generateID()
	post := &model.Post{
		ID:       id,
		Title:    title,
		Content:  content,
		AuthorID: authorID,
		Author: author,
	}
	author.Posts = append(author.Posts, post)


	r.posts = append(r.posts, post)
	return post, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	for _, u := range r.users {
		if u.ID == id {
			return u, nil
		}
	}
	return nil, nil // Return nil without error if user not found
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	for _, p := range r.posts {
		if p.ID == id {
			return p, nil
		}
	}
	return nil, nil // Return nil without error if post not found
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }



// id variable to keep track of the last used ID
var lastID int = 0
// Helper function to generate ascending IDs from 0
func generateID() string {
	lastID++
	return strconv.Itoa(lastID)
}